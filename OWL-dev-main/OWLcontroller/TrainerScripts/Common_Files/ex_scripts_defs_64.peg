Config=Definitions
{
	HOST_BAR0_REG_BASE_ADDR = 0x80000000
	HOST_BAR1_REG_BASE_ADDR = 0x90000000

	
	; adress which the endpoint is map. 
	
	HIM_BAR0_REGS_BASE_ADDR = 0x80000000
	HIM_BAR1_REGS_BASE_ADDR = 0x90000000
	HIM_EROM_REGS_BASE_ADDR = 0xA0000001 ;with EROM enable bit set

	CONTROLLER_REGISTERS_BASE = HIM_BAR0_REGS_BASE_ADDR
    ; Configuration space register
    
	PCIE_PCFG_STTCMD = 0x4
	PCIE_CFGS_BAR0_REG_ADDR = 0x10
	PCIE_CFGS_BAR1_REG_ADDR = 0x14
	PCIE_CFGS_EROM_REG_ADDR = 0x30
	
	;extended configuration space and pointers
	PCIE_CAPABILITIES_PTR = 0x34
	PCI_Power_Magament_Cap = 0x80
	PCIE_CFGS_MSICAP_REG_ADDR = 0x90
	MSI_X_CAPABILITY_ADDRESS  = 0xB0       ; Change to match your device
	PCI_Express_Capability = 0xC0
	ADVANCED_ERROR_REPORT_CAPABILITY_REG = 0x100
	DEVICE_SERIAL_NUM_CAPABILITY_REG = 0X150
	LTR_CAPABILITY_REG = 0X1B8
	SECOND_PCIE_EXTNDD_CAPABILITY_REG = 0X300	
	L1_PM_Substates_Capabilities_Header=0x900
	
	
	PCI_Express_Device_Control_and_Status_Register = 0xC8
	PCI_Express_Device_Capabilities_Register = 0xc4 
	PCI_Express_Device_Control_and_Status_Register_2 = 0xE8		; ; #Device Status 2 | Device Control 2
	
	LTR_SNOOP_REG = 0x1BC
	
	Link_Control_and_Status_Register=0xd0
	Power_Management_Control_Status_Report=0x84
	
	L1_PM_Substates_Capabilities_Register=0x904
	L1_PM_Substates_Control_1_Register=0x908
	L1_PM_Substates_Control_2_Register=0x90C
	
	
	
	;PCIE_CFGS_PMCTLSTT_REG_ADDR = 0x64
	

	PCIE_CFGS_MSICAP_REG_VAL = 0x00010000 
	PCIE_CFGS_MSIADRL_REG_VAL = 0x60000000
	PCIE_CFGS_MSIADRH_REG_VAL = 0x00000000
	PCIE_CFGS_MSIDAT_REG_VAL = 0x00001234

	
	PCIE_CFGS_PMCTLSTT_EN_D0 = 0x00000100
	PCIE_CFGS_PMCTLSTT_EN_D1 = 0x00000101
	PCIE_CFGS_PMCTLSTT_EN_D3 = 0x00000103
	PCIE_CFGS_CMD_REG_VAL = 0x00000006
	MAX_PAYLOAD_SIZE = 0
	MAX_READ_REQ_SIZE = 0
	
	PCIE_CFGS_EXPDEVSTTCTL_MAX_PAYLOAD_SIZE_SHIFT = 5
	PCIE_CFGS_EXPDEVSTTCTL_MAX_READ_REQ_SIZE_SHIFT = 12
	PCIE_CFGS_EXPDEVSTTCTL_REG_VAL = ((MAX_PAYLOAD_SIZE << PCIE_CFGS_EXPDEVSTTCTL_MAX_PAYLOAD_SIZE_SHIFT) | (MAX_READ_REQ_SIZE << PCIE_CFGS_EXPDEVSTTCTL_MAX_READ_REQ_SIZE_SHIFT) | (1 << 4) | (1 << 11))

	PCIE_CFGS_ACK_FREQ_ASPM_CTRL_ADDR	= 0x70c
	SET_ASPM_BIT30						= 0x5b2c2c00
	SET_ASPM_BIT30_VAL			= ((((SET_ASPM_BIT30 & 0xff)<<24) | ((SET_ASPM_BIT30 & 0xff00)<<8) | ((SET_ASPM_BIT30 & 0xff0000)>>8) | ((SET_ASPM_BIT30>>24) & 0xff)))

}


; Convert to big endian
Config=Definitions
{
	PCIE_CFGS_CMD_REG_VAL = ((((PCIE_CFGS_CMD_REG_VAL & 0xff)<<24) | ((PCIE_CFGS_CMD_REG_VAL & 0xff00)<<8) | ((PCIE_CFGS_CMD_REG_VAL & 0xff0000)>>8) | ((PCIE_CFGS_CMD_REG_VAL>>24) & 0xff)))
	PCIE_CFGS_BAR0_REG_VAL = ((((HIM_BAR0_REGS_BASE_ADDR & 0xff)<<24) | ((HIM_BAR0_REGS_BASE_ADDR & 0xff00)<<8) | ((HIM_BAR0_REGS_BASE_ADDR & 0xff0000)>>8) | ((HIM_BAR0_REGS_BASE_ADDR>>24) & 0xff)))
	PCIE_CFGS_BAR1_REG_VAL = ((((HIM_BAR1_REGS_BASE_ADDR & 0xff)<<24) | ((HIM_BAR1_REGS_BASE_ADDR & 0xff00)<<8) | ((HIM_BAR1_REGS_BASE_ADDR & 0xff0000)>>8) | ((HIM_BAR1_REGS_BASE_ADDR>>24) & 0xff)))
	PCIE_CFGS_EROM_REG_VAL = ((((HIM_EROM_REGS_BASE_ADDR & 0xff)<<24) | ((HIM_EROM_REGS_BASE_ADDR & 0xff00)<<8) | ((HIM_EROM_REGS_BASE_ADDR & 0xff0000)>>8) | ((HIM_EROM_REGS_BASE_ADDR>>24) & 0xff)))
	PCIE_CFGS_EXPDEVSTTCTL_REG_VAL = ((((PCIE_CFGS_EXPDEVSTTCTL_REG_VAL & 0xff)<<24) | ((PCIE_CFGS_EXPDEVSTTCTL_REG_VAL & 0xff00)<<8) | ((PCIE_CFGS_EXPDEVSTTCTL_REG_VAL & 0xff0000)>>8) | ((PCIE_CFGS_EXPDEVSTTCTL_REG_VAL>>24) & 0xff)))
	PCIE_CFGS_MSICAP_REG_VAL = ((((PCIE_CFGS_MSICAP_REG_VAL & 0xff)<<24) | ((PCIE_CFGS_MSICAP_REG_VAL & 0xff00)<<8) | ((PCIE_CFGS_MSICAP_REG_VAL & 0xff0000)>>8) | ((PCIE_CFGS_MSICAP_REG_VAL>>24) & 0xff)))
	PCIE_CFGS_MSIADRL_REG_VAL = ((((PCIE_CFGS_MSIADRL_REG_VAL & 0xff)<<24) | ((PCIE_CFGS_MSIADRL_REG_VAL & 0xff00)<<8) | ((PCIE_CFGS_MSIADRL_REG_VAL & 0xff0000)>>8) | ((PCIE_CFGS_MSIADRL_REG_VAL>>24) & 0xff)))
	PCIE_CFGS_MSIADRH_REG_VAL = ((((PCIE_CFGS_MSIADRH_REG_VAL & 0xff)<<24) | ((PCIE_CFGS_MSIADRH_REG_VAL & 0xff00)<<8) | ((PCIE_CFGS_MSIADRH_REG_VAL & 0xff0000)>>8) | ((PCIE_CFGS_MSIADRH_REG_VAL>>24) & 0xff)))
	

}

Config=Definitions
{
	HIM_EROM_REGS_BASE_ADDR = 0xA0000000
}

Config=Definitions
{
	HOST_MEM32_A_BASE_ADDR = 0x10000000
	HOST_MEM32_B_BASE_ADDR = 0x20000000
}

Config=Definitions
{
	MSIX_DEVICE_BASE_ADDR = (HIM_BAR0_REGS_BASE_ADDR + 0x2000)
	MSIX_HOST_BASE_ADDR_BE = 0x00000020
	MSIX_HOST_BASE_ADDR_LE = 0x20000000	
	MSIX_VECTORS_NUM = 8
	MSIX_VECTOR_SIZE = 0x10
	MSIX_MSG_BASE_BE = 0x00305476	
}

Config=Definitions
{
	;HOST_ADMIN_CMDS_BASE_ADDR = 0x11800000
	HOST_ADMIN_CMDS_BASE_ADDR = 0
	;HOST_ADMIN_CMDS_BASE_OFFSET = 0x1800000
	HOST_ADMIN_CMDS_BASE_OFFSET = 0
	;HOST_NVM_CMDS_BASE_ADDR = 0x11880000
	HOST_NVM_CMDS_BASE_ADDR = 0xA00
	;HOST_NVM_CMDS_BASE_OFFSET = 0x1880000
	HOST_NVM_CMDS_BASE_OFFSET = 0xA00
	
	
	
	;HOST_NVM_CMDS_SQ1 = 0x20000
	; With 64 Entries, Queue Size is (4096) 0x1000
	; With 1024 Entries, Queue Size is (65536) 0x10000
	HOST_NVM_CMDS_SQ1 = 0x2000
	HOST_NVM_CMDS_CQ1 =(HOST_NVM_CMDS_SQ1 + 0x10000)
	
	HOST_NVM_CMDS_SQ64 = (HOST_NVM_CMDS_CQ1+0x1000)
	HOST_NVM_CMDS_CQ64 = (HOST_NVM_CMDS_SQ64+0x1000)
	HOST_NVM_CMDS_SQ128 = (HOST_NVM_CMDS_CQ64+0x1000)
	HOST_NVM_CMDS_CQ128 = (HOST_NVM_CMDS_SQ128+0x1000)
	HOST_NVM_CMDS_SQ192 = (HOST_NVM_CMDS_CQ128+0x1000)
	HOST_NVM_CMDS_CQ192 = (HOST_NVM_CMDS_SQ192+0x1000)
	HOST_NVM_CMDS_SQ256 = (HOST_NVM_CMDS_CQ192+0x1000)
	HOST_NVM_CMDS_CQ256 = (HOST_NVM_CMDS_SQ256+0x1000)
	
	; SQ is followed by CQ in memory, and each occupies 0x10000 space
	HOST_NVM_CMDS_SQ2 = (HOST_NVM_CMDS_CQ1 + 0x10000)
	HOST_NVM_CMDS_CQ2 =(HOST_NVM_CMDS_SQ2  + 0x10000)
	
	HOST_NVM_CMDS_SQ3 = (HOST_NVM_CMDS_CQ2 + 0x10000)
	HOST_NVM_CMDS_CQ3 =(HOST_NVM_CMDS_SQ3  + 0x10000)
	
	HOST_NVM_CMDS_SQ4 = (HOST_NVM_CMDS_CQ3 + 0x10000)
	HOST_NVM_CMDS_CQ4 =(HOST_NVM_CMDS_SQ4  + 0x10000)
	
	HOST_NVM_CMDS_SQ5 = (HOST_NVM_CMDS_CQ4 + 0x10000)
	HOST_NVM_CMDS_CQ5 =(HOST_NVM_CMDS_SQ5  + 0x10000)
	
	HOST_NVM_CMDS_SQ6 = (HOST_NVM_CMDS_CQ5 + 0x10000)
	HOST_NVM_CMDS_CQ6 =(HOST_NVM_CMDS_SQ6  + 0x10000)
	
	HOST_NVM_CMDS_SQ7 = (HOST_NVM_CMDS_CQ6 + 0x10000)
	HOST_NVM_CMDS_CQ7 =(HOST_NVM_CMDS_SQ7  + 0x10000)
	
	HOST_NVM_CMDS_SQ8 = (HOST_NVM_CMDS_CQ7 + 0x10000)
	HOST_NVM_CMDS_CQ8 =(HOST_NVM_CMDS_SQ8  + 0x10000)
	
	; WARNING!!
	; Scratch Memory area is same as CQ1, 
	; since we're not using this area, it is Ok for now
	; If we do plan to use this area,
	; the below will have to be changed
	HOST_SCRATCH_MEM_AREA =(HOST_NVM_CMDS_CQ1)
		
	NVM_SQ1_DBL = ( HIM_BAR0_REGS_BASE_ADDR + 0x1008 )
	NVM_CQ1_DBL = ( HIM_BAR0_REGS_BASE_ADDR + 0x100C )
	NVM_SQ2_DBL = ( HIM_BAR0_REGS_BASE_ADDR + 0x1010 )
	NVM_CQ2_DBL = ( HIM_BAR0_REGS_BASE_ADDR + 0x1014 )
	
}

Config=Definitions
{
	HOST_REQUESTER_ID = (64:2:0)
}

template = TLP 
{
    Name = "Temp_OneDwordWrite"
    
    TLPType = MWr64
    Length = 1
    RequesterId = HOST_REQUESTER_ID
    FirstDwBe = 0xF
}

template = TLP 
{
    Name = "Temp_OneDwordRead"
    
    TLPType = MRd64
    Length = 1
    RequesterId = HOST_REQUESTER_ID
    FirstDwBe = 0xF
}